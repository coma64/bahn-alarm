// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for TrackedDepartureStatus.
const (
	Canceled   TrackedDepartureStatus = "canceled"
	Delayed    TrackedDepartureStatus = "delayed"
	NotChecked TrackedDepartureStatus = "not-checked"
	OnTime     TrackedDepartureStatus = "on-time"
)

// Defines values for Urgency.
const (
	Error Urgency = "error"
	Info  Urgency = "info"
	Warn  Urgency = "warn"
)

// Alarm defines model for Alarm.
type Alarm struct {
	Content   Alarm_Content `json:"content"`
	CreatedAt time.Time     `json:"createdAt"`
	Id        int           `json:"id"`
	Urgency   Urgency       `json:"urgency"`
}

// Alarm_Content defines model for Alarm.Content.
type Alarm_Content struct {
	union json.RawMessage
}

// AlarmsList defines model for AlarmsList.
type AlarmsList struct {
	Alarms     []Alarm    `json:"alarms"`
	Pagination Pagination `json:"pagination"`
}

// BahnConnection defines model for BahnConnection.
type BahnConnection struct {
	Departure struct {
		ScheduledTime time.Time `json:"scheduledTime"`
	} `json:"departure"`
}

// BahnConnectionsList defines model for BahnConnectionsList.
type BahnConnectionsList struct {
	Connections []BahnConnection `json:"connections"`
}

// BahnPlace defines model for BahnPlace.
type BahnPlace struct {
	Id        string `json:"id"`
	Label     string `json:"label"`
	Name      string `json:"name"`
	StationId string `json:"stationId"`
}

// BahnPlacesList defines model for BahnPlacesList.
type BahnPlacesList struct {
	Places []BahnPlace `json:"places"`
}

// CancelledAlarm defines model for CancelledAlarm.
type CancelledAlarm struct {
	Connection SimpleConnection `json:"connection"`
	IsCanceled bool             `json:"isCanceled"`
}

// DelayChangeAlarm defines model for DelayChangeAlarm.
type DelayChangeAlarm struct {
	Connection      SimpleConnection `json:"connection"`
	NewDelayMinutes float32          `json:"newDelayMinutes"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// TotalItems The total amount of found items, not just on this page
	TotalItems int `json:"totalItems"`
}

// PushNotificationSubscription defines model for PushNotificationSubscription.
type PushNotificationSubscription struct {
	CreatedAt    time.Time       `json:"createdAt"`
	Id           *float32        `json:"id,omitempty"`
	IsEnabled    bool            `json:"isEnabled"`
	Name         string          `json:"name"`
	Subscription RawSubscription `json:"subscription"`
}

// PushNotificationSubscriptionList defines model for PushNotificationSubscriptionList.
type PushNotificationSubscriptionList struct {
	Pagination    Pagination                     `json:"pagination"`
	Subscriptions []PushNotificationSubscription `json:"subscriptions"`
}

// PushNotificationSubscriptionPartialUpdate defines model for PushNotificationSubscriptionPartialUpdate.
type PushNotificationSubscriptionPartialUpdate struct {
	IsEnabled    *bool            `json:"isEnabled,omitempty"`
	Name         *string          `json:"name,omitempty"`
	Subscription *RawSubscription `json:"subscription,omitempty"`
}

// RawSubscription defines model for RawSubscription.
type RawSubscription struct {
	Endpoint string `json:"endpoint"`
	Keys     struct {
		Auth   string `json:"auth"`
		P256dh string `json:"p256dh"`
	} `json:"keys"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	InviteToken string `json:"inviteToken"`
	Password    string `json:"password"`
	Username    string `json:"username"`
}

// SimpleConnection defines model for SimpleConnection.
type SimpleConnection struct {
	Departure time.Time `json:"departure"`
	FromName  string    `json:"fromName"`
	ToName    string    `json:"toName"`
}

// TrackedConnection defines model for TrackedConnection.
type TrackedConnection struct {
	Departures []TrackedDeparture `json:"departures"`
	FromId     string             `json:"fromId"`
	FromName   string             `json:"fromName"`
	Id         *float32           `json:"id,omitempty"`
	ToId       string             `json:"toId"`
	ToName     string             `json:"toName"`
}

// TrackedConnectionList defines model for TrackedConnectionList.
type TrackedConnectionList struct {
	Connections []TrackedConnection `json:"connections"`
	Pagination  Pagination          `json:"pagination"`
}

// TrackedConnectionUpdate defines model for TrackedConnectionUpdate.
type TrackedConnectionUpdate struct {
	Departures []TrackedDeparture `json:"departures"`
}

// TrackedDeparture defines model for TrackedDeparture.
type TrackedDeparture struct {
	Departure time.Time               `json:"departure"`
	Status    *TrackedDepartureStatus `json:"status,omitempty"`
}

// TrackedDepartureStatus defines model for TrackedDeparture.Status.
type TrackedDepartureStatus string

// TrackingStats defines model for TrackingStats.
type TrackingStats struct {
	CanceledConnectionCount int `json:"canceledConnectionCount"`
	DelayedConnectionCount  int `json:"delayedConnectionCount"`
	NextDeparture           struct {
		ConnectionId int       `json:"connectionId"`
		Departure    time.Time `json:"departure"`
	} `json:"nextDeparture"`
	TotalConnectionCount int `json:"totalConnectionCount"`
}

// Urgency defines model for Urgency.
type Urgency string

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	IsAdmin   bool      `json:"isAdmin"`
	Name      string    `json:"name"`
}

// ValidationFailed defines model for ValidationFailed.
type ValidationFailed struct {
	Message *string `json:"message,omitempty"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	Page    *int     `form:"page,omitempty" json:"page,omitempty"`
	Size    *int     `form:"size,omitempty" json:"size,omitempty"`
	Urgency *Urgency `form:"urgency,omitempty" json:"urgency,omitempty"`
}

// GetBahnConnectionsParams defines parameters for GetBahnConnections.
type GetBahnConnectionsParams struct {
	Departure time.Time `form:"departure" json:"departure"`
	FromId    string    `form:"fromId" json:"fromId"`
	ToId      string    `form:"toId" json:"toId"`
}

// GetBahnPlacesParams defines parameters for GetBahnPlaces.
type GetBahnPlacesParams struct {
	Name string `form:"name" json:"name"`
}

// GetNotificationsPushSubscriptionsParams defines parameters for GetNotificationsPushSubscriptions.
type GetNotificationsPushSubscriptionsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetTrackingConnectionsParams defines parameters for GetTrackingConnections.
type GetTrackingConnectionsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// PostNotificationsPushSubscriptionsJSONRequestBody defines body for PostNotificationsPushSubscriptions for application/json ContentType.
type PostNotificationsPushSubscriptionsJSONRequestBody = PushNotificationSubscription

// PatchNotificationsPushSubscriptionsIdJSONRequestBody defines body for PatchNotificationsPushSubscriptionsId for application/json ContentType.
type PatchNotificationsPushSubscriptionsIdJSONRequestBody = PushNotificationSubscriptionPartialUpdate

// PostTrackingConnectionsJSONRequestBody defines body for PostTrackingConnections for application/json ContentType.
type PostTrackingConnectionsJSONRequestBody = TrackedConnection

// PutTrackingConnectionsIdJSONRequestBody defines body for PutTrackingConnectionsId for application/json ContentType.
type PutTrackingConnectionsIdJSONRequestBody = TrackedConnectionUpdate

// AsDelayChangeAlarm returns the union data inside the Alarm_Content as a DelayChangeAlarm
func (t Alarm_Content) AsDelayChangeAlarm() (DelayChangeAlarm, error) {
	var body DelayChangeAlarm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDelayChangeAlarm overwrites any union data inside the Alarm_Content as the provided DelayChangeAlarm
func (t *Alarm_Content) FromDelayChangeAlarm(v DelayChangeAlarm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDelayChangeAlarm performs a merge with any union data inside the Alarm_Content, using the provided DelayChangeAlarm
func (t *Alarm_Content) MergeDelayChangeAlarm(v DelayChangeAlarm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCancelledAlarm returns the union data inside the Alarm_Content as a CancelledAlarm
func (t Alarm_Content) AsCancelledAlarm() (CancelledAlarm, error) {
	var body CancelledAlarm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledAlarm overwrites any union data inside the Alarm_Content as the provided CancelledAlarm
func (t *Alarm_Content) FromCancelledAlarm(v CancelledAlarm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledAlarm performs a merge with any union data inside the Alarm_Content, using the provided CancelledAlarm
func (t *Alarm_Content) MergeCancelledAlarm(v CancelledAlarm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Alarm_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Alarm_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /alarms)
	GetAlarms(ctx echo.Context, params GetAlarmsParams) error

	// (DELETE /alarms/{id})
	DeleteAlarmsId(ctx echo.Context, id int) error

	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error

	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error

	// (GET /auth/me)
	GetAuthMe(ctx echo.Context) error

	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error

	// (GET /bahn/connections)
	GetBahnConnections(ctx echo.Context, params GetBahnConnectionsParams) error

	// (GET /bahn/places)
	GetBahnPlaces(ctx echo.Context, params GetBahnPlacesParams) error

	// (GET /notifications/push-subscriptions)
	GetNotificationsPushSubscriptions(ctx echo.Context, params GetNotificationsPushSubscriptionsParams) error

	// (POST /notifications/push-subscriptions)
	PostNotificationsPushSubscriptions(ctx echo.Context) error

	// (DELETE /notifications/push-subscriptions/{id})
	DeleteNotificationsPushSubscriptionsId(ctx echo.Context, id int) error

	// (PATCH /notifications/push-subscriptions/{id})
	PatchNotificationsPushSubscriptionsId(ctx echo.Context, id int) error

	// (GET /tracking/connections)
	GetTrackingConnections(ctx echo.Context, params GetTrackingConnectionsParams) error

	// (POST /tracking/connections)
	PostTrackingConnections(ctx echo.Context) error

	// (DELETE /tracking/connections/{id})
	DeleteTrackingConnectionsId(ctx echo.Context, id int) error

	// (PUT /tracking/connections/{id})
	PutTrackingConnectionsId(ctx echo.Context, id int) error

	// (GET /tracking/stats)
	GetTrackingStats(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlarms converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlarms(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "urgency" -------------

	err = runtime.BindQueryParameter("form", true, false, "urgency", ctx.QueryParams(), &params.Urgency)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter urgency: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlarms(ctx, params)
	return err
}

// DeleteAlarmsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlarmsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAlarmsId(ctx, id)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetAuthMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuthMe(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// GetBahnConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetBahnConnections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBahnConnectionsParams
	// ------------- Required query parameter "departure" -------------

	err = runtime.BindQueryParameter("form", true, true, "departure", ctx.QueryParams(), &params.Departure)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departure: %s", err))
	}

	// ------------- Required query parameter "fromId" -------------

	err = runtime.BindQueryParameter("form", true, true, "fromId", ctx.QueryParams(), &params.FromId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromId: %s", err))
	}

	// ------------- Required query parameter "toId" -------------

	err = runtime.BindQueryParameter("form", true, true, "toId", ctx.QueryParams(), &params.ToId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBahnConnections(ctx, params)
	return err
}

// GetBahnPlaces converts echo context to params.
func (w *ServerInterfaceWrapper) GetBahnPlaces(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBahnPlacesParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBahnPlaces(ctx, params)
	return err
}

// GetNotificationsPushSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotificationsPushSubscriptions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotificationsPushSubscriptionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotificationsPushSubscriptions(ctx, params)
	return err
}

// PostNotificationsPushSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostNotificationsPushSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNotificationsPushSubscriptions(ctx)
	return err
}

// DeleteNotificationsPushSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNotificationsPushSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNotificationsPushSubscriptionsId(ctx, id)
	return err
}

// PatchNotificationsPushSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchNotificationsPushSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchNotificationsPushSubscriptionsId(ctx, id)
	return err
}

// GetTrackingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackingConnections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrackingConnectionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackingConnections(ctx, params)
	return err
}

// PostTrackingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) PostTrackingConnections(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTrackingConnections(ctx)
	return err
}

// DeleteTrackingConnectionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTrackingConnectionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTrackingConnectionsId(ctx, id)
	return err
}

// PutTrackingConnectionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrackingConnectionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrackingConnectionsId(ctx, id)
	return err
}

// GetTrackingStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackingStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackingStats(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alarms", wrapper.GetAlarms)
	router.DELETE(baseURL+"/alarms/:id", wrapper.DeleteAlarmsId)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/auth/me", wrapper.GetAuthMe)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/bahn/connections", wrapper.GetBahnConnections)
	router.GET(baseURL+"/bahn/places", wrapper.GetBahnPlaces)
	router.GET(baseURL+"/notifications/push-subscriptions", wrapper.GetNotificationsPushSubscriptions)
	router.POST(baseURL+"/notifications/push-subscriptions", wrapper.PostNotificationsPushSubscriptions)
	router.DELETE(baseURL+"/notifications/push-subscriptions/:id", wrapper.DeleteNotificationsPushSubscriptionsId)
	router.PATCH(baseURL+"/notifications/push-subscriptions/:id", wrapper.PatchNotificationsPushSubscriptionsId)
	router.GET(baseURL+"/tracking/connections", wrapper.GetTrackingConnections)
	router.POST(baseURL+"/tracking/connections", wrapper.PostTrackingConnections)
	router.DELETE(baseURL+"/tracking/connections/:id", wrapper.DeleteTrackingConnectionsId)
	router.PUT(baseURL+"/tracking/connections/:id", wrapper.PutTrackingConnectionsId)
	router.GET(baseURL+"/tracking/stats", wrapper.GetTrackingStats)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xbW2/bOBb+K1ztAn1RYqfJFK3f0mRnJ4tMJ2jSWWCnAUJLxxYbmVR5Seot/N8XJHUX",
	"KclJnGYG6IMikYffuV/ofg8itsoYBSpFMPseiCiBFTaPxynmK/2QcZYBlwTM64hRCVTqR0bht0Uw++N7",
	"8A8Oi2AW/H1SUZvkpCankOL1SYLpEizJTdi/4QTTCNIU4nz59SYMIg5YQnxszl0wvsIymAUxlrAnyQqC",
	"MJDrDIJZICQndBlswoDEem3+mlAJS+D6veJLoNFaf+xD8SlfttmEAYevinCIg9kfmmxFow4s1KKhEEnC",
	"qP3DyEmjN4yIcyJkV57YfNNPRIJ96INViLBgDHOO1/rvDC8JxebwARIX1co2czmYBrXr8iw2/wKR1Ie9",
	"xwk9qbjtMBVDhrlUHLqfNIpYpRBfab2N1GYLZpNGF2BreYVmmBePlirVjldVS0gdnbVQ1o/w4bxIceSQ",
	"acPUKw9I8RxS5xeKrew7H4Q0Sj9zEXQ5giFUnFTf3suBR8iZ+baVfK1AhkSbE3ZhagWbHsUPwbkkqyyF",
	"psKJsPShLs85YyngrvPVFjdiiY4gnSD6xEAp3JsjfiVUSUswR0vVaq4DZwtse0MH8TlbEvoRvipwqhoL",
	"cc+4EQt8wxqQtjSIOOhIWsaEcp0jwCsBvDDkioaSw/Gj3BlWB7iM46IRU5scSCZxelbYaQwi4iSzS4Or",
	"BJD5jvCKKSoRW6AFUzRGxrBDRJlEX5SQiFEkEyJQhpc12GW2auGunemEq0TygUmyIJEBfanmNVQdg3lo",
	"SuWA499oug5mkisI24airf6fFM9zo49hgVUqW4tLH6hiUbkwcB0tWrz0GfhHfN9gvS9yVVibubxx3rbC",
	"9oS3B2XoJpTx0bHXGAYDZgWgff62srjAXBKcfsq0ZTlSV91W/Mbx5PbQ4aG9qIMUaJwxYivfDpxbWAtH",
	"badk4lyevf7pTZwM51hDoFw+WOiUEHNALl19hCURErg3NBN6RyRcsVugzch68PrwyOWanliuMuCXJqAf",
	"/M0T0leEngNdaiG93TLA17YePiTchw0+XYLqpMn+KndcBF1wtvrgs2nJPJ9a/JREyi3hQI17xXF0C/Eo",
	"ZsaHmJzqaXm0oy3RWM+apvHm3YBgKl2fQgw0wUoARbrcS9jiEXlJshaSo9fTsE8NFZBfMKXsDniIfpkv",
	"BusLk2ByzsOmusybrtbEOLU9XXPStYhd9ZR1dIONZQeWL2/sxFx9fWOvdk79vW4jQFTGNJ1OD/bMv6uD",
	"w9nR29l0+t96hOyNILrFUnlCUisNk9FicawrclvKVJ0EZXIvSkBD1WxUMKp9Hs/xWHfFVYnGKx5Cl5cS",
	"S0duLBBWqj7RpbJ7ZpMzNmothW+yRyeVOZ7FvsO2DOs98mmc5pKSKelH8OXqBNrbvHIKvdJui8sF8VM1",
	"MCtMjtAFC8LgHnNdIALnjNe2Vsb6SQB/ws6jqysijuMVof3F43bNYbM7sOTrvYFLRL/jlMQmqv2MSV7M",
	"NnlegRC6x2vA+ZlAGqNXRX3yCq2IEIQuEaGI5/WZC267CtSC0BrpNKLHFOEsQwvGUUruAMncJ3VDKjkm",
	"FBmLEUjnKCQTQKfvP9PPdA+dURRhAXohLrCgu5JNtMAkVRwQRjdH0+kNsoEARSwGRATiIBWnECMOS8zj",
	"FITQpO4TLF8JFLNIrYBKiPVRx2mKispVIJlgWS6w5A9uEAeRMSoA5ZpCujIGKvOG4zNFaA+dLQwL//7P",
	"lYYA3zKtUsQ4ItQgL6l5wDao3Hy5lzcoYuyWmEW6Zc84iBKVn2mtMyKNhnXRguzEJgzugAurl+n+dP9A",
	"Gw7LgOKMBLPgcH+6f2gSpEyMxUyqyfAS7Lw9A16O54J/gTyuxrUcr0ACF2Ycrx0i+KqArwtT1mW3mTDY",
	"ZNjot6euuYObiCD/8xD5aQsq1fS8IjRuFH+tXdVaghHM6+m0dSeBsyzNjWLyRdjCZdwptSG98aiWJ6Up",
	"yhWyCYOj6UHX2T4wiVK2XEKMSN5k4qWojdWv9btcrZPvJN5YGinYAqep3lPz3oIyRaNLx9pYKrmayFWF",
	"MpvLK+Y76ulK86jLlcURj+VarzpyrzITsB65KJlMUra00TxjttJtkrkEKRA2Hp57JqNIqCgCIRYqRXZ7",
	"2BLlBRPyWMnkPP+ah7P3LF4/mfU0xp2bjU0qQ7K9bCM34ns6k+6kJYdh/96M6RCH9YhZpCb9ruydGypU",
	"MmkpkClZ16BXF3rdGCmdW+vSyx/gei18tiLwBlQlk18h2GGUMRWRQw1XCaBIca7TixK2uHkkqzyf9Awr",
	"o5gJ7cg32iMnp3sc9LlHukYFN0Uo+sFeYkG864I+M2MlJNktUK1JU4DktYhPXXOc0Emri/eZaOu6clzy",
	"r7ck/gQxrtdxn1BOOwbzzxClfEYyns4uiwLX5bCnOqjpD81B3gNQW1ZjGiPJEF5I4Ka0XJI70JV3bQ6x",
	"patrg6nbTnVz2mc29u51nMXkDdDL0ULt4tijACsEtMIySnSPY1h4lGxp7U5DTDIlkr3OZYxP4PX7EHGh",
	"RHLZ2Plia/Zd6nHwzsyj2Sr2o6b8t9duQ6XmotqfGgdVuItk2X9v582cz3J2WzcndijyIxLyWV6gFmOS",
	"x1vCGIcf2bX1G85ftZtzuJYOxQ7f0q9/nIye12eb999jO0O7/Hn0pA2/GAyOrUKL4f7WleifMaU97ELN",
	"JrTOFZMzwUm7uV5DPiCiFUocSGtu3e3CLxyXjLtNYM4DX1DW8rSR4xzc0WxWjCIiEE454HiN5qDL39ym",
	"fBbi8/qRKc5hRH/VvNZ0K+XyKiWfWR7P4KsvKGP5zFYUV8tDacreQe+ws2ke5JrvFTdvFvOjgrt+LYDf",
	"FUaleBrMgkTKbDaZpCzCacKEnL2dvpua/2xRfRezyWSO9yO2wm+O9nV7fF2e0Lk7bNywVfZq5laarIPB",
	"VgqrZjoF+O4+XTuheknSavGqiUSjbOkSurS/PRdm3uJEYTr77kZ7x4LwnClp70NRZH5pXdtaXP1cb/4f",
	"AAD//5YrLsAyMwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
