// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for TrackedDepartureStatus.
const (
	Canceled   TrackedDepartureStatus = "canceled"
	Delayed    TrackedDepartureStatus = "delayed"
	NotChecked TrackedDepartureStatus = "not-checked"
	OnTime     TrackedDepartureStatus = "on-time"
)

// Defines values for Urgency.
const (
	Error Urgency = "error"
	Info  Urgency = "info"
	Warn  Urgency = "warn"
)

// Alarm defines model for Alarm.
type Alarm struct {
	Connection SimpleConnection `json:"connection"`
	CreatedAt  time.Time        `json:"createdAt"`
	Id         int              `json:"id"`
	Message    string           `json:"message"`
	Urgency    Urgency          `json:"urgency"`
}

// AlarmsList defines model for AlarmsList.
type AlarmsList struct {
	Alarms     []Alarm    `json:"alarms"`
	Pagination Pagination `json:"pagination"`
}

// BahnConnection defines model for BahnConnection.
type BahnConnection struct {
	Departure struct {
		ScheduledTime time.Time `json:"scheduledTime"`
	} `json:"departure"`
}

// BahnConnectionsList defines model for BahnConnectionsList.
type BahnConnectionsList struct {
	Connections []BahnConnection `json:"connections"`
}

// BahnPlace defines model for BahnPlace.
type BahnPlace struct {
	Id        string `json:"id"`
	Label     string `json:"label"`
	Name      string `json:"name"`
	StationId string `json:"stationId"`
}

// BahnPlacesList defines model for BahnPlacesList.
type BahnPlacesList struct {
	Places []BahnPlace `json:"places"`
}

// BahnStation defines model for BahnStation.
type BahnStation struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// TotalItems The total amount of found items, not just on this page
	TotalItems int `json:"totalItems"`
}

// PushNotificationSubscription defines model for PushNotificationSubscription.
type PushNotificationSubscription struct {
	CreatedAt    *time.Time      `json:"createdAt,omitempty"`
	Id           *int            `json:"id,omitempty"`
	IsEnabled    bool            `json:"isEnabled"`
	Name         string          `json:"name"`
	Subscription RawSubscription `json:"subscription"`
}

// PushNotificationSubscriptionCreate defines model for PushNotificationSubscriptionCreate.
type PushNotificationSubscriptionCreate struct {
	Name         string          `json:"name"`
	Subscription RawSubscription `json:"subscription"`
}

// PushNotificationSubscriptionList defines model for PushNotificationSubscriptionList.
type PushNotificationSubscriptionList struct {
	Pagination    Pagination                     `json:"pagination"`
	Subscriptions []PushNotificationSubscription `json:"subscriptions"`
}

// RawSubscription defines model for RawSubscription.
type RawSubscription struct {
	Endpoint *string            `json:"endpoint,omitempty"`
	Keys     *map[string]string `json:"keys,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	InviteToken string `json:"inviteToken"`
	Password    string `json:"password"`
	Username    string `json:"username"`
}

// SimpleConnection defines model for SimpleConnection.
type SimpleConnection struct {
	Departure time.Time `json:"departure"`
	FromName  string    `json:"fromName"`
	ToName    string    `json:"toName"`
}

// TrackedConnection defines model for TrackedConnection.
type TrackedConnection struct {
	Departures []TrackedDeparture `json:"departures"`
	From       BahnStation        `json:"from"`
	Id         *int               `json:"id,omitempty"`
	To         BahnStation        `json:"to"`
}

// TrackedConnectionList defines model for TrackedConnectionList.
type TrackedConnectionList struct {
	Connections []TrackedConnection `json:"connections"`
	Pagination  Pagination          `json:"pagination"`
}

// TrackedConnectionUpdate defines model for TrackedConnectionUpdate.
type TrackedConnectionUpdate struct {
	Departures []TrackedDepartureWrite `json:"departures"`
}

// TrackedConnectionWrite defines model for TrackedConnectionWrite.
type TrackedConnectionWrite struct {
	Departures []TrackedDepartureWrite `json:"departures"`
	From       BahnStation             `json:"from"`
	To         BahnStation             `json:"to"`
}

// TrackedDeparture defines model for TrackedDeparture.
type TrackedDeparture struct {
	Delay     int                    `json:"delay"`
	Departure time.Time              `json:"departure"`
	Status    TrackedDepartureStatus `json:"status"`
}

// TrackedDepartureStatus defines model for TrackedDeparture.Status.
type TrackedDepartureStatus string

// TrackedDepartureWrite defines model for TrackedDepartureWrite.
type TrackedDepartureWrite struct {
	Departure time.Time `json:"departure"`
}

// TrackingStats defines model for TrackingStats.
type TrackingStats struct {
	CanceledConnectionCount int `json:"canceledConnectionCount"`
	DelayedConnectionCount  int `json:"delayedConnectionCount"`
	NextDeparture           struct {
		ConnectionId int       `json:"connectionId"`
		Departure    time.Time `json:"departure"`
	} `json:"nextDeparture"`
	TotalConnectionCount int `json:"totalConnectionCount"`
}

// Urgency defines model for Urgency.
type Urgency string

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	IsAdmin   bool      `json:"isAdmin"`
	Name      string    `json:"name"`
}

// ValidationFailed defines model for ValidationFailed.
type ValidationFailed struct {
	Message *string `json:"message,omitempty"`
}

// VapidKeys defines model for VapidKeys.
type VapidKeys struct {
	PublicKey string `json:"publicKey"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	Page    *int     `form:"page,omitempty" json:"page,omitempty"`
	Size    *int     `form:"size,omitempty" json:"size,omitempty"`
	Urgency *Urgency `form:"urgency,omitempty" json:"urgency,omitempty"`
}

// GetBahnConnectionsParams defines parameters for GetBahnConnections.
type GetBahnConnectionsParams struct {
	Departure time.Time `form:"departure" json:"departure"`
	FromId    string    `form:"fromId" json:"fromId"`
	ToId      string    `form:"toId" json:"toId"`
}

// GetBahnPlacesParams defines parameters for GetBahnPlaces.
type GetBahnPlacesParams struct {
	Name string `form:"name" json:"name"`
}

// GetNotificationsPushSubscriptionsParams defines parameters for GetNotificationsPushSubscriptions.
type GetNotificationsPushSubscriptionsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetTrackingConnectionsParams defines parameters for GetTrackingConnections.
type GetTrackingConnectionsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// PostNotificationsPushSubscriptionsJSONRequestBody defines body for PostNotificationsPushSubscriptions for application/json ContentType.
type PostNotificationsPushSubscriptionsJSONRequestBody = PushNotificationSubscriptionCreate

// PutNotificationsPushSubscriptionsIdJSONRequestBody defines body for PutNotificationsPushSubscriptionsId for application/json ContentType.
type PutNotificationsPushSubscriptionsIdJSONRequestBody = PushNotificationSubscription

// PostTrackingConnectionsJSONRequestBody defines body for PostTrackingConnections for application/json ContentType.
type PostTrackingConnectionsJSONRequestBody = TrackedConnectionWrite

// PutTrackingConnectionsIdJSONRequestBody defines body for PutTrackingConnectionsId for application/json ContentType.
type PutTrackingConnectionsIdJSONRequestBody = TrackedConnectionUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /alarms)
	GetAlarms(ctx echo.Context, params GetAlarmsParams) error

	// (DELETE /alarms/{id})
	DeleteAlarmsId(ctx echo.Context, id int) error

	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error

	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error

	// (GET /auth/me)
	GetAuthMe(ctx echo.Context) error

	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error

	// (GET /bahn/connections)
	GetBahnConnections(ctx echo.Context, params GetBahnConnectionsParams) error

	// (GET /bahn/places)
	GetBahnPlaces(ctx echo.Context, params GetBahnPlacesParams) error

	// (GET /notifications/push-subscriptions)
	GetNotificationsPushSubscriptions(ctx echo.Context, params GetNotificationsPushSubscriptionsParams) error

	// (POST /notifications/push-subscriptions)
	PostNotificationsPushSubscriptions(ctx echo.Context) error

	// (DELETE /notifications/push-subscriptions/{id})
	DeleteNotificationsPushSubscriptionsId(ctx echo.Context, id int) error

	// (PUT /notifications/push-subscriptions/{id})
	PutNotificationsPushSubscriptionsId(ctx echo.Context, id int) error

	// (GET /notifications/vapid-keys)
	GetNotificationsVapidKeys(ctx echo.Context) error

	// (GET /tracking/connections)
	GetTrackingConnections(ctx echo.Context, params GetTrackingConnectionsParams) error

	// (POST /tracking/connections)
	PostTrackingConnections(ctx echo.Context) error

	// (DELETE /tracking/connections/{id})
	DeleteTrackingConnectionsId(ctx echo.Context, id int) error

	// (PUT /tracking/connections/{id})
	PutTrackingConnectionsId(ctx echo.Context, id int) error

	// (GET /tracking/stats)
	GetTrackingStats(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlarms converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlarms(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "urgency" -------------

	err = runtime.BindQueryParameter("form", true, false, "urgency", ctx.QueryParams(), &params.Urgency)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter urgency: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlarms(ctx, params)
	return err
}

// DeleteAlarmsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlarmsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAlarmsId(ctx, id)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetAuthMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuthMe(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// GetBahnConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetBahnConnections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBahnConnectionsParams
	// ------------- Required query parameter "departure" -------------

	err = runtime.BindQueryParameter("form", true, true, "departure", ctx.QueryParams(), &params.Departure)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departure: %s", err))
	}

	// ------------- Required query parameter "fromId" -------------

	err = runtime.BindQueryParameter("form", true, true, "fromId", ctx.QueryParams(), &params.FromId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromId: %s", err))
	}

	// ------------- Required query parameter "toId" -------------

	err = runtime.BindQueryParameter("form", true, true, "toId", ctx.QueryParams(), &params.ToId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBahnConnections(ctx, params)
	return err
}

// GetBahnPlaces converts echo context to params.
func (w *ServerInterfaceWrapper) GetBahnPlaces(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBahnPlacesParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBahnPlaces(ctx, params)
	return err
}

// GetNotificationsPushSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotificationsPushSubscriptions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotificationsPushSubscriptionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotificationsPushSubscriptions(ctx, params)
	return err
}

// PostNotificationsPushSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostNotificationsPushSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNotificationsPushSubscriptions(ctx)
	return err
}

// DeleteNotificationsPushSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNotificationsPushSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNotificationsPushSubscriptionsId(ctx, id)
	return err
}

// PutNotificationsPushSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutNotificationsPushSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutNotificationsPushSubscriptionsId(ctx, id)
	return err
}

// GetNotificationsVapidKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotificationsVapidKeys(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotificationsVapidKeys(ctx)
	return err
}

// GetTrackingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackingConnections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrackingConnectionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackingConnections(ctx, params)
	return err
}

// PostTrackingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) PostTrackingConnections(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTrackingConnections(ctx)
	return err
}

// DeleteTrackingConnectionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTrackingConnectionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTrackingConnectionsId(ctx, id)
	return err
}

// PutTrackingConnectionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrackingConnectionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrackingConnectionsId(ctx, id)
	return err
}

// GetTrackingStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackingStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackingStats(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alarms", wrapper.GetAlarms)
	router.DELETE(baseURL+"/alarms/:id", wrapper.DeleteAlarmsId)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/auth/me", wrapper.GetAuthMe)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/bahn/connections", wrapper.GetBahnConnections)
	router.GET(baseURL+"/bahn/places", wrapper.GetBahnPlaces)
	router.GET(baseURL+"/notifications/push-subscriptions", wrapper.GetNotificationsPushSubscriptions)
	router.POST(baseURL+"/notifications/push-subscriptions", wrapper.PostNotificationsPushSubscriptions)
	router.DELETE(baseURL+"/notifications/push-subscriptions/:id", wrapper.DeleteNotificationsPushSubscriptionsId)
	router.PUT(baseURL+"/notifications/push-subscriptions/:id", wrapper.PutNotificationsPushSubscriptionsId)
	router.GET(baseURL+"/notifications/vapid-keys", wrapper.GetNotificationsVapidKeys)
	router.GET(baseURL+"/tracking/connections", wrapper.GetTrackingConnections)
	router.POST(baseURL+"/tracking/connections", wrapper.PostTrackingConnections)
	router.DELETE(baseURL+"/tracking/connections/:id", wrapper.DeleteTrackingConnectionsId)
	router.PUT(baseURL+"/tracking/connections/:id", wrapper.PutTrackingConnectionsId)
	router.GET(baseURL+"/tracking/stats", wrapper.GetTrackingStats)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+bLmfF4DUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
