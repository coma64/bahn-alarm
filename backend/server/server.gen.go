// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for TrackedDepartureStatus.
const (
	Canceled TrackedDepartureStatus = "canceled"
	Delayed  TrackedDepartureStatus = "delayed"
	OnTime   TrackedDepartureStatus = "on-time"
)

// Defines values for Urgency.
const (
	Error Urgency = "error"
	Info  Urgency = "info"
	Warn  Urgency = "warn"
)

// Alarm defines model for Alarm.
type Alarm struct {
	Connection struct {
		Departure time.Time `json:"departure"`
		FromName  string    `json:"fromName"`
		ToName    string    `json:"toName"`
	} `json:"connection"`
	Content   Alarm_Content `json:"content"`
	CreatedAt time.Time     `json:"createdAt"`
	Id        int           `json:"id"`
	Urgency   Urgency       `json:"urgency"`
}

// Alarm_Content defines model for Alarm.Content.
type Alarm_Content struct {
	union json.RawMessage
}

// AlarmsList defines model for AlarmsList.
type AlarmsList struct {
	Alarms     []Alarm    `json:"alarms"`
	Pagination Pagination `json:"pagination"`
}

// BahnConnection defines model for BahnConnection.
type BahnConnection struct {
	Departure struct {
		ScheduledTime time.Time `json:"scheduledTime"`
	} `json:"departure"`
}

// BahnConnectionsList defines model for BahnConnectionsList.
type BahnConnectionsList struct {
	Connections []BahnConnection `json:"connections"`
}

// BahnPlace defines model for BahnPlace.
type BahnPlace struct {
	Id        string `json:"id"`
	Label     string `json:"label"`
	Name      string `json:"name"`
	StationId string `json:"stationId"`
}

// BahnPlacesList defines model for BahnPlacesList.
type BahnPlacesList struct {
	Places []BahnPlace `json:"places"`
}

// CancelledAlarm defines model for CancelledAlarm.
type CancelledAlarm struct {
	IsCanceled bool `json:"isCanceled"`
}

// DelayChangeAlarm defines model for DelayChangeAlarm.
type DelayChangeAlarm struct {
	NewDelayMinutes float32 `json:"newDelayMinutes"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// TotalItems The total amount of found items, not just on this page
	TotalItems int `json:"totalItems"`
}

// PushNotificationSubscription defines model for PushNotificationSubscription.
type PushNotificationSubscription struct {
	Id           *float32        `json:"id,omitempty"`
	IsEnabled    bool            `json:"isEnabled"`
	Name         string          `json:"name"`
	Subscription RawSubscription `json:"subscription"`
}

// PushNotificationSubscriptionList defines model for PushNotificationSubscriptionList.
type PushNotificationSubscriptionList struct {
	Pagination    Pagination                     `json:"pagination"`
	Subscriptions []PushNotificationSubscription `json:"subscriptions"`
}

// PushNotificationSubscriptionPartialUpdate defines model for PushNotificationSubscriptionPartialUpdate.
type PushNotificationSubscriptionPartialUpdate struct {
	IsEnabled    *bool            `json:"isEnabled,omitempty"`
	Name         *string          `json:"name,omitempty"`
	Subscription *RawSubscription `json:"subscription,omitempty"`
}

// RawSubscription defines model for RawSubscription.
type RawSubscription struct {
	Endpoint string `json:"endpoint"`
	Keys     struct {
		Auth   string `json:"auth"`
		P256dh string `json:"p256dh"`
	} `json:"keys"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	InviteToken string `json:"inviteToken"`
	Password    string `json:"password"`
	Username    string `json:"username"`
}

// TrackedConnection defines model for TrackedConnection.
type TrackedConnection struct {
	Departures []TrackedDeparture `json:"departures"`
	FromId     string             `json:"fromId"`
	FromName   string             `json:"fromName"`
	Id         *float32           `json:"id,omitempty"`
	ToId       string             `json:"toId"`
	ToName     string             `json:"toName"`
}

// TrackedConnectionList defines model for TrackedConnectionList.
type TrackedConnectionList struct {
	Connections []TrackedConnection `json:"connections"`
	Pagination  Pagination          `json:"pagination"`
}

// TrackedConnectionUpdate defines model for TrackedConnectionUpdate.
type TrackedConnectionUpdate struct {
	Departures []TrackedDeparture `json:"departures"`
}

// TrackedDeparture defines model for TrackedDeparture.
type TrackedDeparture struct {
	Departure time.Time               `json:"departure"`
	Status    *TrackedDepartureStatus `json:"status,omitempty"`
}

// TrackedDepartureStatus defines model for TrackedDeparture.Status.
type TrackedDepartureStatus string

// TrackingStats defines model for TrackingStats.
type TrackingStats struct {
	CanceledConnectionCount int `json:"canceledConnectionCount"`
	DelayedConnectionCount  int `json:"delayedConnectionCount"`
	NextDeparture           struct {
		ConnectionId int       `json:"connectionId"`
		Departure    time.Time `json:"departure"`
	} `json:"nextDeparture"`
	TotalConnectionCount int `json:"totalConnectionCount"`
}

// Urgency defines model for Urgency.
type Urgency string

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        float32   `json:"id"`
	IsAdmin   bool      `json:"isAdmin"`
	Name      string    `json:"name"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	Page    *int     `form:"page,omitempty" json:"page,omitempty"`
	Size    *int     `form:"size,omitempty" json:"size,omitempty"`
	Urgency *Urgency `form:"urgency,omitempty" json:"urgency,omitempty"`
}

// GetBahnConnectionsParams defines parameters for GetBahnConnections.
type GetBahnConnectionsParams struct {
	Departure time.Time `form:"departure" json:"departure"`
	FromId    string    `form:"fromId" json:"fromId"`
	ToId      string    `form:"toId" json:"toId"`
}

// GetBahnPlacesParams defines parameters for GetBahnPlaces.
type GetBahnPlacesParams struct {
	Name string `form:"name" json:"name"`
}

// GetNotificationsPushSubscriptionsParams defines parameters for GetNotificationsPushSubscriptions.
type GetNotificationsPushSubscriptionsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetTrackingConnectionsParams defines parameters for GetTrackingConnections.
type GetTrackingConnectionsParams struct {
	Page *int `form:"page,omitempty" json:"page,omitempty"`
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// PostNotificationsPushSubscriptionsJSONRequestBody defines body for PostNotificationsPushSubscriptions for application/json ContentType.
type PostNotificationsPushSubscriptionsJSONRequestBody = PushNotificationSubscription

// PatchNotificationsPushSubscriptionsIdJSONRequestBody defines body for PatchNotificationsPushSubscriptionsId for application/json ContentType.
type PatchNotificationsPushSubscriptionsIdJSONRequestBody = PushNotificationSubscriptionPartialUpdate

// PostTrackingConnectionsJSONRequestBody defines body for PostTrackingConnections for application/json ContentType.
type PostTrackingConnectionsJSONRequestBody = TrackedConnection

// PutTrackingConnectionsIdJSONRequestBody defines body for PutTrackingConnectionsId for application/json ContentType.
type PutTrackingConnectionsIdJSONRequestBody = TrackedConnectionUpdate

// AsDelayChangeAlarm returns the union data inside the Alarm_Content as a DelayChangeAlarm
func (t Alarm_Content) AsDelayChangeAlarm() (DelayChangeAlarm, error) {
	var body DelayChangeAlarm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDelayChangeAlarm overwrites any union data inside the Alarm_Content as the provided DelayChangeAlarm
func (t *Alarm_Content) FromDelayChangeAlarm(v DelayChangeAlarm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDelayChangeAlarm performs a merge with any union data inside the Alarm_Content, using the provided DelayChangeAlarm
func (t *Alarm_Content) MergeDelayChangeAlarm(v DelayChangeAlarm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCancelledAlarm returns the union data inside the Alarm_Content as a CancelledAlarm
func (t Alarm_Content) AsCancelledAlarm() (CancelledAlarm, error) {
	var body CancelledAlarm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledAlarm overwrites any union data inside the Alarm_Content as the provided CancelledAlarm
func (t *Alarm_Content) FromCancelledAlarm(v CancelledAlarm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledAlarm performs a merge with any union data inside the Alarm_Content, using the provided CancelledAlarm
func (t *Alarm_Content) MergeCancelledAlarm(v CancelledAlarm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Alarm_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Alarm_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /alarms)
	GetAlarms(ctx echo.Context, params GetAlarmsParams) error

	// (DELETE /alarms/{id})
	DeleteAlarmsId(ctx echo.Context, id int) error

	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error

	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error

	// (GET /auth/me)
	GetAuthMe(ctx echo.Context) error

	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error

	// (GET /bahn/connections)
	GetBahnConnections(ctx echo.Context, params GetBahnConnectionsParams) error

	// (GET /bahn/places)
	GetBahnPlaces(ctx echo.Context, params GetBahnPlacesParams) error

	// (GET /notifications/push-subscriptions)
	GetNotificationsPushSubscriptions(ctx echo.Context, params GetNotificationsPushSubscriptionsParams) error

	// (POST /notifications/push-subscriptions)
	PostNotificationsPushSubscriptions(ctx echo.Context) error

	// (DELETE /notifications/push-subscriptions/{id})
	DeleteNotificationsPushSubscriptionsId(ctx echo.Context, id int) error

	// (PATCH /notifications/push-subscriptions/{id})
	PatchNotificationsPushSubscriptionsId(ctx echo.Context, id int) error

	// (GET /tracking/connections)
	GetTrackingConnections(ctx echo.Context, params GetTrackingConnectionsParams) error

	// (POST /tracking/connections)
	PostTrackingConnections(ctx echo.Context) error

	// (DELETE /tracking/connections/{id})
	DeleteTrackingConnectionsId(ctx echo.Context, id int) error

	// (PUT /tracking/connections/{id})
	PutTrackingConnectionsId(ctx echo.Context, id int) error

	// (GET /tracking/stats)
	GetTrackingStats(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlarms converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlarms(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "urgency" -------------

	err = runtime.BindQueryParameter("form", true, false, "urgency", ctx.QueryParams(), &params.Urgency)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter urgency: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAlarms(ctx, params)
	return err
}

// DeleteAlarmsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlarmsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAlarmsId(ctx, id)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetAuthMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAuthMe(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// GetBahnConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetBahnConnections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBahnConnectionsParams
	// ------------- Required query parameter "departure" -------------

	err = runtime.BindQueryParameter("form", true, true, "departure", ctx.QueryParams(), &params.Departure)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter departure: %s", err))
	}

	// ------------- Required query parameter "fromId" -------------

	err = runtime.BindQueryParameter("form", true, true, "fromId", ctx.QueryParams(), &params.FromId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromId: %s", err))
	}

	// ------------- Required query parameter "toId" -------------

	err = runtime.BindQueryParameter("form", true, true, "toId", ctx.QueryParams(), &params.ToId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBahnConnections(ctx, params)
	return err
}

// GetBahnPlaces converts echo context to params.
func (w *ServerInterfaceWrapper) GetBahnPlaces(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBahnPlacesParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBahnPlaces(ctx, params)
	return err
}

// GetNotificationsPushSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetNotificationsPushSubscriptions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotificationsPushSubscriptionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNotificationsPushSubscriptions(ctx, params)
	return err
}

// PostNotificationsPushSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostNotificationsPushSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNotificationsPushSubscriptions(ctx)
	return err
}

// DeleteNotificationsPushSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNotificationsPushSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteNotificationsPushSubscriptionsId(ctx, id)
	return err
}

// PatchNotificationsPushSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchNotificationsPushSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchNotificationsPushSubscriptionsId(ctx, id)
	return err
}

// GetTrackingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackingConnections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrackingConnectionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackingConnections(ctx, params)
	return err
}

// PostTrackingConnections converts echo context to params.
func (w *ServerInterfaceWrapper) PostTrackingConnections(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTrackingConnections(ctx)
	return err
}

// DeleteTrackingConnectionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTrackingConnectionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTrackingConnectionsId(ctx, id)
	return err
}

// PutTrackingConnectionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrackingConnectionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrackingConnectionsId(ctx, id)
	return err
}

// GetTrackingStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackingStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackingStats(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alarms", wrapper.GetAlarms)
	router.DELETE(baseURL+"/alarms/:id", wrapper.DeleteAlarmsId)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/auth/me", wrapper.GetAuthMe)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/bahn/connections", wrapper.GetBahnConnections)
	router.GET(baseURL+"/bahn/places", wrapper.GetBahnPlaces)
	router.GET(baseURL+"/notifications/push-subscriptions", wrapper.GetNotificationsPushSubscriptions)
	router.POST(baseURL+"/notifications/push-subscriptions", wrapper.PostNotificationsPushSubscriptions)
	router.DELETE(baseURL+"/notifications/push-subscriptions/:id", wrapper.DeleteNotificationsPushSubscriptionsId)
	router.PATCH(baseURL+"/notifications/push-subscriptions/:id", wrapper.PatchNotificationsPushSubscriptionsId)
	router.GET(baseURL+"/tracking/connections", wrapper.GetTrackingConnections)
	router.POST(baseURL+"/tracking/connections", wrapper.PostTrackingConnections)
	router.DELETE(baseURL+"/tracking/connections/:id", wrapper.DeleteTrackingConnectionsId)
	router.PUT(baseURL+"/tracking/connections/:id", wrapper.PutTrackingConnectionsId)
	router.GET(baseURL+"/tracking/stats", wrapper.GetTrackingStats)

}

type GetAlarmsRequestObject struct {
	Params GetAlarmsParams
}

type GetAlarmsResponseObject interface {
	VisitGetAlarmsResponse(w http.ResponseWriter) error
}

type GetAlarms200JSONResponse AlarmsList

func (response GetAlarms200JSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms401Response struct {
}

func (response GetAlarms401Response) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteAlarmsIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteAlarmsIdResponseObject interface {
	VisitDeleteAlarmsIdResponse(w http.ResponseWriter) error
}

type DeleteAlarmsId204Response struct {
}

func (response DeleteAlarmsId204Response) VisitDeleteAlarmsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAlarmsId401Response struct {
}

func (response DeleteAlarmsId401Response) VisitDeleteAlarmsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteAlarmsId404Response struct {
}

func (response DeleteAlarmsId404Response) VisitDeleteAlarmsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin204Response struct {
}

func (response PostAuthLogin204Response) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostAuthLogin400Response struct {
}

func (response PostAuthLogin400Response) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostAuthLogin422JSONResponse InvalidRequest

func (response PostAuthLogin422JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogoutRequestObject struct {
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(w http.ResponseWriter) error
}

type PostAuthLogout204Response struct {
}

func (response PostAuthLogout204Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostAuthLogout401Response struct {
}

func (response PostAuthLogout401Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetAuthMeRequestObject struct {
}

type GetAuthMeResponseObject interface {
	VisitGetAuthMeResponse(w http.ResponseWriter) error
}

type GetAuthMe200JSONResponse User

func (response GetAuthMe200JSONResponse) VisitGetAuthMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthMe401Response struct {
}

func (response GetAuthMe401Response) VisitGetAuthMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostAuthRegisterRequestObject struct {
	Body *PostAuthRegisterJSONRequestBody
}

type PostAuthRegisterResponseObject interface {
	VisitPostAuthRegisterResponse(w http.ResponseWriter) error
}

type PostAuthRegister201Response struct {
}

func (response PostAuthRegister201Response) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostAuthRegister400Response struct {
}

func (response PostAuthRegister400Response) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostAuthRegister422JSONResponse InvalidRequest

func (response PostAuthRegister422JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetBahnConnectionsRequestObject struct {
	Params GetBahnConnectionsParams
}

type GetBahnConnectionsResponseObject interface {
	VisitGetBahnConnectionsResponse(w http.ResponseWriter) error
}

type GetBahnConnections200JSONResponse BahnConnectionsList

func (response GetBahnConnections200JSONResponse) VisitGetBahnConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBahnConnections401Response struct {
}

func (response GetBahnConnections401Response) VisitGetBahnConnectionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetBahnPlacesRequestObject struct {
	Params GetBahnPlacesParams
}

type GetBahnPlacesResponseObject interface {
	VisitGetBahnPlacesResponse(w http.ResponseWriter) error
}

type GetBahnPlaces200JSONResponse BahnPlacesList

func (response GetBahnPlaces200JSONResponse) VisitGetBahnPlacesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBahnPlaces401Response struct {
}

func (response GetBahnPlaces401Response) VisitGetBahnPlacesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetNotificationsPushSubscriptionsRequestObject struct {
	Params GetNotificationsPushSubscriptionsParams
}

type GetNotificationsPushSubscriptionsResponseObject interface {
	VisitGetNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error
}

type GetNotificationsPushSubscriptions200JSONResponse PushNotificationSubscriptionList

func (response GetNotificationsPushSubscriptions200JSONResponse) VisitGetNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNotificationsPushSubscriptions401Response struct {
}

func (response GetNotificationsPushSubscriptions401Response) VisitGetNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostNotificationsPushSubscriptionsRequestObject struct {
	Body *PostNotificationsPushSubscriptionsJSONRequestBody
}

type PostNotificationsPushSubscriptionsResponseObject interface {
	VisitPostNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error
}

type PostNotificationsPushSubscriptions201JSONResponse PushNotificationSubscription

func (response PostNotificationsPushSubscriptions201JSONResponse) VisitPostNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostNotificationsPushSubscriptions401Response struct {
}

func (response PostNotificationsPushSubscriptions401Response) VisitPostNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostNotificationsPushSubscriptions422JSONResponse InvalidRequest

func (response PostNotificationsPushSubscriptions422JSONResponse) VisitPostNotificationsPushSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNotificationsPushSubscriptionsIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteNotificationsPushSubscriptionsIdResponseObject interface {
	VisitDeleteNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error
}

type DeleteNotificationsPushSubscriptionsId204Response struct {
}

func (response DeleteNotificationsPushSubscriptionsId204Response) VisitDeleteNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteNotificationsPushSubscriptionsId401Response struct {
}

func (response DeleteNotificationsPushSubscriptionsId401Response) VisitDeleteNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteNotificationsPushSubscriptionsId404Response struct {
}

func (response DeleteNotificationsPushSubscriptionsId404Response) VisitDeleteNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchNotificationsPushSubscriptionsIdRequestObject struct {
	Id   int `json:"id"`
	Body *PatchNotificationsPushSubscriptionsIdJSONRequestBody
}

type PatchNotificationsPushSubscriptionsIdResponseObject interface {
	VisitPatchNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error
}

type PatchNotificationsPushSubscriptionsId204Response struct {
}

func (response PatchNotificationsPushSubscriptionsId204Response) VisitPatchNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PatchNotificationsPushSubscriptionsId401Response struct {
}

func (response PatchNotificationsPushSubscriptionsId401Response) VisitPatchNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PatchNotificationsPushSubscriptionsId404Response struct {
}

func (response PatchNotificationsPushSubscriptionsId404Response) VisitPatchNotificationsPushSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetTrackingConnectionsRequestObject struct {
	Params GetTrackingConnectionsParams
}

type GetTrackingConnectionsResponseObject interface {
	VisitGetTrackingConnectionsResponse(w http.ResponseWriter) error
}

type GetTrackingConnections200JSONResponse []TrackedConnectionList

func (response GetTrackingConnections200JSONResponse) VisitGetTrackingConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrackingConnections401Response struct {
}

func (response GetTrackingConnections401Response) VisitGetTrackingConnectionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostTrackingConnectionsRequestObject struct {
	Body *PostTrackingConnectionsJSONRequestBody
}

type PostTrackingConnectionsResponseObject interface {
	VisitPostTrackingConnectionsResponse(w http.ResponseWriter) error
}

type PostTrackingConnections201JSONResponse TrackedConnection

func (response PostTrackingConnections201JSONResponse) VisitPostTrackingConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTrackingConnections401Response struct {
}

func (response PostTrackingConnections401Response) VisitPostTrackingConnectionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostTrackingConnections409Response struct {
}

func (response PostTrackingConnections409Response) VisitPostTrackingConnectionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type PostTrackingConnections422JSONResponse InvalidRequest

func (response PostTrackingConnections422JSONResponse) VisitPostTrackingConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTrackingConnectionsIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteTrackingConnectionsIdResponseObject interface {
	VisitDeleteTrackingConnectionsIdResponse(w http.ResponseWriter) error
}

type DeleteTrackingConnectionsId204Response struct {
}

func (response DeleteTrackingConnectionsId204Response) VisitDeleteTrackingConnectionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTrackingConnectionsId401Response struct {
}

func (response DeleteTrackingConnectionsId401Response) VisitDeleteTrackingConnectionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteTrackingConnectionsId404Response struct {
}

func (response DeleteTrackingConnectionsId404Response) VisitDeleteTrackingConnectionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutTrackingConnectionsIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutTrackingConnectionsIdJSONRequestBody
}

type PutTrackingConnectionsIdResponseObject interface {
	VisitPutTrackingConnectionsIdResponse(w http.ResponseWriter) error
}

type PutTrackingConnectionsId204Response struct {
}

func (response PutTrackingConnectionsId204Response) VisitPutTrackingConnectionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutTrackingConnectionsId401Response struct {
}

func (response PutTrackingConnectionsId401Response) VisitPutTrackingConnectionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutTrackingConnectionsId404Response struct {
}

func (response PutTrackingConnectionsId404Response) VisitPutTrackingConnectionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetTrackingStatsRequestObject struct {
}

type GetTrackingStatsResponseObject interface {
	VisitGetTrackingStatsResponse(w http.ResponseWriter) error
}

type GetTrackingStats200JSONResponse TrackingStats

func (response GetTrackingStats200JSONResponse) VisitGetTrackingStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrackingStats401Response struct {
}

func (response GetTrackingStats401Response) VisitGetTrackingStatsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /alarms)
	GetAlarms(ctx context.Context, request GetAlarmsRequestObject) (GetAlarmsResponseObject, error)

	// (DELETE /alarms/{id})
	DeleteAlarmsId(ctx context.Context, request DeleteAlarmsIdRequestObject) (DeleteAlarmsIdResponseObject, error)

	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)

	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)

	// (GET /auth/me)
	GetAuthMe(ctx context.Context, request GetAuthMeRequestObject) (GetAuthMeResponseObject, error)

	// (POST /auth/register)
	PostAuthRegister(ctx context.Context, request PostAuthRegisterRequestObject) (PostAuthRegisterResponseObject, error)

	// (GET /bahn/connections)
	GetBahnConnections(ctx context.Context, request GetBahnConnectionsRequestObject) (GetBahnConnectionsResponseObject, error)

	// (GET /bahn/places)
	GetBahnPlaces(ctx context.Context, request GetBahnPlacesRequestObject) (GetBahnPlacesResponseObject, error)

	// (GET /notifications/push-subscriptions)
	GetNotificationsPushSubscriptions(ctx context.Context, request GetNotificationsPushSubscriptionsRequestObject) (GetNotificationsPushSubscriptionsResponseObject, error)

	// (POST /notifications/push-subscriptions)
	PostNotificationsPushSubscriptions(ctx context.Context, request PostNotificationsPushSubscriptionsRequestObject) (PostNotificationsPushSubscriptionsResponseObject, error)

	// (DELETE /notifications/push-subscriptions/{id})
	DeleteNotificationsPushSubscriptionsId(ctx context.Context, request DeleteNotificationsPushSubscriptionsIdRequestObject) (DeleteNotificationsPushSubscriptionsIdResponseObject, error)

	// (PATCH /notifications/push-subscriptions/{id})
	PatchNotificationsPushSubscriptionsId(ctx context.Context, request PatchNotificationsPushSubscriptionsIdRequestObject) (PatchNotificationsPushSubscriptionsIdResponseObject, error)

	// (GET /tracking/connections)
	GetTrackingConnections(ctx context.Context, request GetTrackingConnectionsRequestObject) (GetTrackingConnectionsResponseObject, error)

	// (POST /tracking/connections)
	PostTrackingConnections(ctx context.Context, request PostTrackingConnectionsRequestObject) (PostTrackingConnectionsResponseObject, error)

	// (DELETE /tracking/connections/{id})
	DeleteTrackingConnectionsId(ctx context.Context, request DeleteTrackingConnectionsIdRequestObject) (DeleteTrackingConnectionsIdResponseObject, error)

	// (PUT /tracking/connections/{id})
	PutTrackingConnectionsId(ctx context.Context, request PutTrackingConnectionsIdRequestObject) (PutTrackingConnectionsIdResponseObject, error)

	// (GET /tracking/stats)
	GetTrackingStats(ctx context.Context, request GetTrackingStatsRequestObject) (GetTrackingStatsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAlarms operation middleware
func (sh *strictHandler) GetAlarms(ctx echo.Context, params GetAlarmsParams) error {
	var request GetAlarmsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarms(ctx.Request().Context(), request.(GetAlarmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAlarmsResponseObject); ok {
		return validResponse.VisitGetAlarmsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteAlarmsId operation middleware
func (sh *strictHandler) DeleteAlarmsId(ctx echo.Context, id int) error {
	var request DeleteAlarmsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAlarmsId(ctx.Request().Context(), request.(DeleteAlarmsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAlarmsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAlarmsIdResponseObject); ok {
		return validResponse.VisitDeleteAlarmsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostAuthLogin operation middleware
func (sh *strictHandler) PostAuthLogin(ctx echo.Context) error {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx.Request().Context(), request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		return validResponse.VisitPostAuthLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx echo.Context) error {
	var request PostAuthLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogout(ctx.Request().Context(), request.(PostAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthLogoutResponseObject); ok {
		return validResponse.VisitPostAuthLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAuthMe operation middleware
func (sh *strictHandler) GetAuthMe(ctx echo.Context) error {
	var request GetAuthMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthMe(ctx.Request().Context(), request.(GetAuthMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthMeResponseObject); ok {
		return validResponse.VisitGetAuthMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRegister operation middleware
func (sh *strictHandler) PostAuthRegister(ctx echo.Context) error {
	var request PostAuthRegisterRequestObject

	var body PostAuthRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegister(ctx.Request().Context(), request.(PostAuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRegisterResponseObject); ok {
		return validResponse.VisitPostAuthRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetBahnConnections operation middleware
func (sh *strictHandler) GetBahnConnections(ctx echo.Context, params GetBahnConnectionsParams) error {
	var request GetBahnConnectionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBahnConnections(ctx.Request().Context(), request.(GetBahnConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBahnConnections")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBahnConnectionsResponseObject); ok {
		return validResponse.VisitGetBahnConnectionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetBahnPlaces operation middleware
func (sh *strictHandler) GetBahnPlaces(ctx echo.Context, params GetBahnPlacesParams) error {
	var request GetBahnPlacesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBahnPlaces(ctx.Request().Context(), request.(GetBahnPlacesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBahnPlaces")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBahnPlacesResponseObject); ok {
		return validResponse.VisitGetBahnPlacesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetNotificationsPushSubscriptions operation middleware
func (sh *strictHandler) GetNotificationsPushSubscriptions(ctx echo.Context, params GetNotificationsPushSubscriptionsParams) error {
	var request GetNotificationsPushSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNotificationsPushSubscriptions(ctx.Request().Context(), request.(GetNotificationsPushSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNotificationsPushSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetNotificationsPushSubscriptionsResponseObject); ok {
		return validResponse.VisitGetNotificationsPushSubscriptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostNotificationsPushSubscriptions operation middleware
func (sh *strictHandler) PostNotificationsPushSubscriptions(ctx echo.Context) error {
	var request PostNotificationsPushSubscriptionsRequestObject

	var body PostNotificationsPushSubscriptionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostNotificationsPushSubscriptions(ctx.Request().Context(), request.(PostNotificationsPushSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNotificationsPushSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostNotificationsPushSubscriptionsResponseObject); ok {
		return validResponse.VisitPostNotificationsPushSubscriptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteNotificationsPushSubscriptionsId operation middleware
func (sh *strictHandler) DeleteNotificationsPushSubscriptionsId(ctx echo.Context, id int) error {
	var request DeleteNotificationsPushSubscriptionsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNotificationsPushSubscriptionsId(ctx.Request().Context(), request.(DeleteNotificationsPushSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNotificationsPushSubscriptionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteNotificationsPushSubscriptionsIdResponseObject); ok {
		return validResponse.VisitDeleteNotificationsPushSubscriptionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchNotificationsPushSubscriptionsId operation middleware
func (sh *strictHandler) PatchNotificationsPushSubscriptionsId(ctx echo.Context, id int) error {
	var request PatchNotificationsPushSubscriptionsIdRequestObject

	request.Id = id

	var body PatchNotificationsPushSubscriptionsIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchNotificationsPushSubscriptionsId(ctx.Request().Context(), request.(PatchNotificationsPushSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchNotificationsPushSubscriptionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchNotificationsPushSubscriptionsIdResponseObject); ok {
		return validResponse.VisitPatchNotificationsPushSubscriptionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTrackingConnections operation middleware
func (sh *strictHandler) GetTrackingConnections(ctx echo.Context, params GetTrackingConnectionsParams) error {
	var request GetTrackingConnectionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrackingConnections(ctx.Request().Context(), request.(GetTrackingConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrackingConnections")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTrackingConnectionsResponseObject); ok {
		return validResponse.VisitGetTrackingConnectionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostTrackingConnections operation middleware
func (sh *strictHandler) PostTrackingConnections(ctx echo.Context) error {
	var request PostTrackingConnectionsRequestObject

	var body PostTrackingConnectionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTrackingConnections(ctx.Request().Context(), request.(PostTrackingConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTrackingConnections")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTrackingConnectionsResponseObject); ok {
		return validResponse.VisitPostTrackingConnectionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteTrackingConnectionsId operation middleware
func (sh *strictHandler) DeleteTrackingConnectionsId(ctx echo.Context, id int) error {
	var request DeleteTrackingConnectionsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTrackingConnectionsId(ctx.Request().Context(), request.(DeleteTrackingConnectionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTrackingConnectionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTrackingConnectionsIdResponseObject); ok {
		return validResponse.VisitDeleteTrackingConnectionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutTrackingConnectionsId operation middleware
func (sh *strictHandler) PutTrackingConnectionsId(ctx echo.Context, id int) error {
	var request PutTrackingConnectionsIdRequestObject

	request.Id = id

	var body PutTrackingConnectionsIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTrackingConnectionsId(ctx.Request().Context(), request.(PutTrackingConnectionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTrackingConnectionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTrackingConnectionsIdResponseObject); ok {
		return validResponse.VisitPutTrackingConnectionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTrackingStats operation middleware
func (sh *strictHandler) GetTrackingStats(ctx echo.Context) error {
	var request GetTrackingStatsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrackingStats(ctx.Request().Context(), request.(GetTrackingStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrackingStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTrackingStatsResponseObject); ok {
		return validResponse.VisitGetTrackingStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xaW2/cuBX+KyxbYF+UGdnxBsm8OXbadeHNGrGDAl34gSOdkZhIpMKLvdPA/70gKY1u",
	"1GUcj+sukIeJeHh4+J37ob/jiOcFZ8CUxKvvWEYp5MT+PM2IyM2PQvAChKJgP0ecMYgU5ay/FkNBhNIC",
	"zH82XORE4RWOiYJXiuaAA6y2BeAVlkpQluCHAG8Ezz+S3O7oLSo+sPQQYAHfNBUQ49XvNZPdlqAhy+3u",
	"WL7+ApEynCPOFDBlWHMGv23w6vfv+G8CNniF/7qsMVmWgCzPISPbs5SwBBwwD8H4hjPCIsgyiEvyW3Oq",
	"AKIgPlXz8aFx4/qUKUhAmO9aJMCirVkck+JzSdZFjMa45tEULGgquMbJSG8vIi+pVH3NE7tmflEF7seY",
	"WBWE1cWIEGRr/l+QhDJSWdcYi6uasnu5UpgWN58RvCcpO5trzu0lI0WsM4hvaD7b2jtitnn0BeyQjxt0",
	"+y4DWqpVO19VHZB6OutI2TxiSM6rjEQeTFumXntARtaQeVfYUNyQyir9Ip4OHdYRmAsZ7qTm9tEbDIBc",
	"2LW98HWATEFbMvbJ1Ak2fWilo4AmImvOMyB992kQG7fvRb4edwb3luhXyrRyn8ojmM7XJl51TuhuMMdc",
	"sDuS0fgTfNPggzUHKUli9Q1/kLzIDP+/U8hi9JOWIIwOf0I5lZKyBFGGRMlpyg0rxj5cL3lC2aBIBZHy",
	"nou4LZOESIA5dhcSdnSe+F6J3uah1XT42O0M6gN8d7hqhdT2DRRXJLuozDQGGQlaOFJ8kwKy64jkXDOF",
	"+AZtuGYxsnYdIMYV+qKlQpwhlVKJCgNj0EtWHbkbZ3rF1TL9yBXd0MgKfa3XDan8MUMAiX9j2RavlNAQ",
	"dK0vwFR+YGRdmn8MG6Iz1SHeeUMdV3aE2Kc52RFszMk/kfvWPcaiUC1r54x90RoIT4/KsG1R5ke3UW1O",
	"BrxagO75+2JxRYSiJPtcmPTsi48N+xg2iCe3gd4dukQ9SYHFBaeucu2J8xW20lObaZV6yYvjn9/E6XSO",
	"tAx25JOFyk7EUiCfrj5BQqUCMRhbKbujCm74V2Dt0Hh0/PrE544DwVgXIK5tRD76y0BMzim7BJYYkN7u",
	"GaEbW18/Jl4HrXv6gLoRJPoK8awydb5bllzPdyWlpxQ3TdVFG8437yY6uBqfc4iBpURLYMiUOCnfDLc3",
	"k/Fb8Y4kJ8dhMNYv1oL8QhjjdyAC9Mt6M5lUbSAubx60+0r7pd9eynlqe7qCvG8Rh+qjmtJNNlM9sYZi",
	"7UHMdahXGtXO+XB/12r9amMKw/Dolf13c/R6dfJ2FYb/bkaV0VbetBW6DOI6N2JyVhHHphy2KT/a1d5B",
	"4+CacsBXBuy5vsfu/EFAKEuuFVGeDFLJVCv3zFSE/slEeZVZtAz+UCNaqA3wIh46bM+J0wg+rdN8KNnK",
	"dca9fAVvd9sgTsEg2l24fCJ+rsdClZFRtuE4wPdEmDIKhOCisbU2z88ShEcFPziyatbgp3FO2XiFtV8L",
	"1C6bHfvmMMtTqhhBDCC9dueUIVIUaMMFyugdIFW6hGl7lCCUIaswiUxSQCoFdP4eBzijETBpZXd3wKcF",
	"iVJAx4vQjtgyvMKpUsVquby/v18Qu7rgIlmWW+Xy8uLsw8frD6+OF+EiVXlmbY0qC4PJncj13QG+AyGd",
	"tOEiXBwZOl4AIwXFK/x6ES5e2zitUqu6ZT2US8CNOgsQu8kI/geo03pSJkgOCoS0k1CjJvxNg9hWAJuK",
	"yXZ3Lia32qPQ1/P5mUj6nwEmP+/BpR5c1ozmTUFvjQHJghvcza7jMCwDTTUOJkWRlQ3E8ot0+XPeKY35",
	"qLWzjn1lGSoV8hDgk/Cob4IfuUIZTxKIES37A5LIxkTz1nwr1br8TuMHxyMDl2fb6j23351Qtnbx6dgY",
	"S42r9afawVyCqS/fU08fzZP+rZwc8dxbG6oTP5WdPozgolW6zHjiYkzBXcHVZnMNSiKC/vmvGxRx/pUC",
	"4gxJHUUg5UZnyG0POlBecalOtUovy9VytPSex9sns57WqOnhwYW6KWyvu5Jb+MI+YTldQ1UTgrhAuy7E",
	"bDo+frKbdCZ5Hl+opBE7koZKTbPZVijXqqnRQd0YujmoXTprM+SPcMWOfC5vDQZYrdJfAR8w6ti07cH4",
	"JgUUaSGAKav1J7iqKJv2aWVU7f2BfKU7PfC6y9GYu2RbVN2mCk0jXuOadKRsl/5SvWVNUrbsNJRDZtl5",
	"LZpXADRr5eEkMa8I95+wa7wnc9AUp7Jdn8/nkIWB721uoEJo6A+tQd0DMFdwEhYjxRHZKBC2+kzoHZia",
	"tNES7+nexmCatlM/XI2ZjXv6mmcxZWn+crTQeLcbUIADAeVERamp/u0Vfghb1hhJy2WhZfqqN0sfArw5",
	"zpZXWqbXrZ0vtm4/pB4nnzwGNFvHe9TGf3/ttlRqXy+H0+GkCg+RIMefXQaz5bOc3dXNmWvX9+gPXkz2",
	"7drBHHef2beNm82ftZ/zOJYJxB7PMp//dxg9r8e2Hy/n9oaO/Hn0ZAy/GpjNrUGrmfPedej/Y0J73MuO",
	"S2e9tw5velNuc7OCfERmq5Q4kdT8ujuEX3heuw6bvrwH/njOCt/1qeozEJWIZAJIvEVrMHVnqc6Xle8a",
	"1jHk8TPTm8eA/qw5re1S2udRWj0zHs/gpy8oWw2ZraxeO6dSlHsWPWBP0z7IN82rXqOczD8U2M1nCeKu",
	"MqrWG1XGI5KlXKrV2/BdaP/KvV6Xq+VyTRYRz8mbk4VpjG93J/Te07RKgakSj9pe7cTKsPVcsJO+6mlO",
	"JXx/n6mbULMc6TR39SyiVbL0GV27P/qVdtLilcL29P2N7oUFkTXXyr0Rosj+tWxja/Xwc/vw3wAAAP//",
	"RbglC3ExAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
